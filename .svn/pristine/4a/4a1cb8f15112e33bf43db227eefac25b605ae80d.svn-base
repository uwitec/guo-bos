package com.guo.bos.web.action;
import java.io.IOException;

import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.struts2.ServletActionContext;
import org.hibernate.criterion.DetachedCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.guo.bos.domain.Staff;
import com.guo.bos.service.IStaffService;
import com.guo.bos.utils.PageBean;
import com.guo.bos.web.action.base.BaseAction;

/**
 * 取派员管理
 * @author guo
 *
 */
@Controller
@Scope("prototype")
public class StaffAction extends BaseAction<Staff>{
	@Autowired
	private IStaffService staffService;
	
	/**
	 * 添加取派员
	 */
	public String add(){
		staffService.save(model);
		return LIST;
	}
	
	//属性驱动，用来接收页面传过来的参数
	private int page;
	private int rows;
	
	/**
	 * 分页查询
	 */
	public String pageQuery(){
		PageBean pageBean = new PageBean();
		//把客户端发过来的参数传给pageBean;
		pageBean.setCurrentPage(page);
		pageBean.setPageSize(rows);
		//创建离线查询对象，具体需要查询那张表，因为里面有映射
		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Staff.class);
		pageBean.setDetachedCriteria(detachedCriteria); 
		
		//调用staffService查询
		staffService.pageQuery(pageBean);
		
		//使用json-lib将pageBean对象转化为json，通过输出流写回页面
		//JSONObject 将单一对象转化为JSON
		//JSONArray 将数组或集合转化为JSON
		
		JsonConfig jsonConfig = new JsonConfig();
		//指定哪些属性不需要转json
		jsonConfig.setExcludes(new String[]{"currentPage","detachedCriteria","pageSize"});
		//这里需要把jsonConfig对象传过去
		String json = JSONObject.fromObject(pageBean,jsonConfig).toString();
		
		//设置字符编码
		ServletActionContext.getResponse().setContentType("text/json;charset=UTF-8");
		try {
			//将json格式的数据写回到页面
			ServletActionContext.getResponse().getWriter().print(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return NONE;
	}
	//属性驱动，接受页面提交的ids
	private String ids;
	
	/**
	 * 取派员批量删除
	 */
	public String deleteBatch() {
		staffService.deleteBatch(ids);
		return LIST;
	}
	/**
	 * 修改取派员信息
	 */
	public String edit() {
		//先查询数据库，根据ID查询原始数据
		Staff staff = staffService.findById(model.getId());
		//使用页面提交的数据进行覆盖
		staff.setDeltag(model.getDeltag());
		staff.setName(model.getName());
		staff.setHaspda(model.getHaspda());
		staff.setTelephone(model.getTelephone());
		staff.setStation(model.getStation());
		staffService.update(staff);
		return LIST;
	}
	
	
	public void setPage(int page) {
		this.page = page;
	}
	
	public void setRows(int rows) {
		this.rows = rows;
	}



	public String getIds() {
		return ids;
	}



	public void setIds(String ids) {
		this.ids = ids;
	}
}
